#ifndef _OPEN_SOURCE_ /* { */
/*
 *
 * @APPLE_LICENSE_HEADER_START@
 * 
 * Copyright (c) 2010 Apple Computer, Inc.  All Rights Reserved.
 * 
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this
 * file.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 * 
 * @APPLE_LICENSE_HEADER_END@
 */
/*
 *  IOHIDManagerPersistentProperties.h
 *  Private header file. Do not distribute.
 *
 *  Copyright 2010 Apple, Inc. All rights reserved.
 *
 */

#ifndef _IOKIT_HID_IOHIDMANAGER_PERSISTENTPROPERTIES_H_ /* { */
#define _IOKIT_HID_IOHIDMANAGER_PERSISTENTPROPERTIES_H_

typedef struct {
    CFStringRef applicationID;
    CFStringRef userName;
    CFStringRef hostName;
    IOOptionBits options;
}   __IOHIDPropertyContext;

typedef struct {
    CFStringRef key;
    CFTypeRef property;
}   __IOHIDApplyPropertyToSetContext;

CFStringRef __IOHIDManagerGetRootKey();
CFStringRef __IOHIDDeviceGetRootKey(IOHIDDeviceRef device);
CFStringRef __IOHIDDeviceGetUUIDKey(IOHIDDeviceRef device);
CFStringRef __IOHIDElementGetRootKey(IOHIDElementRef element);

void __IOHIDManagerSaveProperties(IOHIDManagerRef manager, __IOHIDPropertyContext *context);
void __IOHIDDeviceSaveProperties(IOHIDDeviceRef device, __IOHIDPropertyContext *context);
void __IOHIDElementSaveProperties(IOHIDElementRef element, __IOHIDPropertyContext *context);

void __IOHIDManagerLoadProperties(IOHIDManagerRef manager);
void __IOHIDDeviceLoadProperties(IOHIDDeviceRef device);
void __IOHIDElementLoadProperties(IOHIDElementRef element);


void __IOHIDApplyPropertyToDeviceSet(const void *value, void *context);
void __IOHIDApplyPropertiesToDeviceFromDictionary(const void *key, const void *value, void *context);

void __IOHIDSaveDeviceSet(const void *value, void *context);
void __IOHIDSaveElementSet(const void *value, void *context);
void __IOHIDLoadElementSet(const void *value, void *context);
void __IOHIDPropertySaveWithContext(CFStringRef key, CFPropertyListRef value, __IOHIDPropertyContext *context);

void __IOHIDPropertySaveToKeyWithSpecialKeys(CFDictionaryRef dictionary, CFStringRef key, CFStringRef *specialKeys, __IOHIDPropertyContext *context);
CFMutableDictionaryRef __IOHIDPropertyLoadFromKeyWithSpecialKeys(CFStringRef key, CFStringRef *specialKeys);
CFMutableDictionaryRef __IOHIDPropertyLoadDictionaryFromKey(CFStringRef key);

#define CFRELEASE_IF_NOT_NULL(X) \
            do { \
                if (X) { \
                    CFRelease(X); \
                    X = NULL; \
                } \
            } \
            while (0)

#define kIOHIDManagerKey "com.apple.iohidmanager"
#define kIOHIDManagerUUIDKey "com.apple.iohidmanager.uuid"

/*
 The way things work.
 
 All IOHIDManager properties are stored under the IOHIDManager root key (MRK) in a dictionary
 of settings.
 
 Device UUIDs are found in an array under a key generated by concatinating the MRK
 and the IOHIDDevice root key with a # between them.
 
 Device properties are found in a dictionary under the MRK#UUID key.
 
 Element properties are found un a dictionary under the MRK#UUID concatinated with the 
 IOHIDElement root key (ERK) with a # between them.
 
 That being said, elements have a set of special keys (SKs) that they will look for specificaly under
 MRK#UUID#ERK#SK. If something is set to that key, it will be loaded in place of any matching key
 under MRK#UUID#ERK. Note that the set of special keys for elements can be expanded if we
 find more that we want to treat specially. Additionally, both the IOHIDManager and IOHIDDevice
 will eventually (I would expect) have a set of special keys.
*/

#endif /* } _IOKIT_HID_IOHIDMANAGER_PERSISTENTPROPERTIES_H_ */
#endif /* } _OPEN_SOURCE_ */
